diff --git a/nrf5_SDK_for_Mesh_v5.0.0_src/scripts/interactive_pyaci/aci/aci_cmd.py b/nrf5_SDK_for_Mesh_v5.0.0_src/scripts/interactive_pyaci/aci/aci_cmd.py
index f7f92f3b..8fa50048 100644
--- a/nrf5_SDK_for_Mesh_v5.0.0_src/scripts/interactive_pyaci/aci/aci_cmd.py
+++ b/nrf5_SDK_for_Mesh_v5.0.0_src/scripts/interactive_pyaci/aci/aci_cmd.py
@@ -968,6 +968,70 @@ class NetStateGet(CommandPacket):
         __data = bytearray()
         super(NetStateGet, self).__init__(0xAF, __data)
 
+class HBPublicationGet(CommandPacket):
+    """Gets the Heartbeat Publication state"""
+    def __init__(self):
+        __data = bytearray()
+        super(HBPublicationGet, self).__init__(0xB0, __data)
+
+class HBPublicationSet(CommandPacket):
+    """Sets the Heartbeat Publication state
+
+    Parameters
+    ----------
+        dst : uint16_t
+            The destination to send heartbeat messages.
+        count : uint32_t
+            How many messages to send.
+        period : uint32_t
+            What interval to send messages.
+        ttl : uint8_t
+            Initial TTL.
+        features : uint16_t
+            The features that trigger sending messages when changed.
+        netkey_index : uint16_t
+            The global NetKey Index of the Netkey used to send.
+
+    Return
+    ------
+        NRF_ERROR_INVALID_DATA :
+            Invalid netkey_index.
+            Check that A netkey is added corresponding the netkey_index in device
+    """
+    def __init__(self, dst, count, period, ttl, features, netkey_index):
+        __data = bytearray()
+        __data += struct.pack("<H", dst)
+        __data += struct.pack("<I", count)
+        __data += struct.pack("<I", period)
+        __data += struct.pack("<B", ttl)
+        __data += struct.pack("<H", features)
+        __data += struct.pack("<H", netkey_index)
+        super(HBPublicationSet, self).__init__(0xB1, __data)
+
+class HBSubscriptionGet(CommandPacket):
+    """Gets the Heartbeat Subscription state"""
+    def __init__(self):
+        __data = bytearray()
+        super(HBSubscriptionGet, self).__init__(0xB2, __data)
+
+class HBSubscriptionSet(CommandPacket):
+    """Sets the Heartbeat Subscription state
+
+    Parameters
+    ----------
+        src : uint16_t
+            The unicast source address for messages a node shall process.
+        dst : uint16_t
+            The destination to send heartbeat messages.
+        period : uint32_t
+            The number of seconds left for processing messages.
+    """
+    def __init__(self, src, dst, period):
+        __data = bytearray()
+        __data += struct.pack("<H", src)
+        __data += struct.pack("<H", dst)
+        __data += struct.pack("<I", period)
+        super(HBSubscriptionSet, self).__init__(0xB3, __data)
 
 class JumpToBootloader(CommandPacket):
     """Immediately jump to bootloader mode."""
@@ -1740,6 +1804,29 @@ class NetStateGetRsp(ResponsePacket):
         __data["next_seqnum_block"], = struct.unpack("<I", raw_data[7:11])
         super(NetStateGetRsp, self).__init__("NetStateGet", 0xAF, __data)
 
+class HBPublicationGetRsp(ResponsePacket):
+    """Response to a(n) HBPublicationGet command."""
+    def __init__(self, raw_data):
+        __data = {}
+        __data["dst"], = struct.unpack("<H", raw_data[0:2])
+        __data["count_log"], = struct.unpack("<B", raw_data[2:3])
+        __data["period_log"], = struct.unpack("<B", raw_data[3:4])
+        __data["ttl"], = struct.unpack("<B", raw_data[4:5])
+        __data["features"], = struct.unpack("<H", raw_data[5:7])
+        __data["netkey_index"], = struct.unpack("<H", raw_data[7:9])
+        super(HBPublicationGetRsp, self).__init__("HBPublicationGet", 0xB0, __data)
+
+class HBSubscriptionGetRsp(ResponsePacket):
+    """Response to a(n) HBSubscriptionGet command."""
+    def __init__(self, raw_data):
+        __data = {}
+        __data["src"], = struct.unpack("<H", raw_data[0:2])
+        __data["dst"], = struct.unpack("<H", raw_data[2:4])
+        __data["period_log"], = struct.unpack("<B", raw_data[4:5])
+        __data["count_log"], = struct.unpack("<B", raw_data[5:6])
+        __data["min_hops"], = struct.unpack("<B", raw_data[6:7])
+        __data["max_hops"], = struct.unpack("<B", raw_data[7:8])
+        super(HBSubscriptionGetRsp, self).__init__("HBSubscriptionGet", 0xB2, __data)
 
 class BankInfoGetRsp(ResponsePacket):
     """Response to a(n) BankInfoGet command."""
@@ -1930,6 +2017,8 @@ RESPONSE_LUT = {
     0xA6: {"object": AddrPublicationRemoveRsp, "name": "AddrPublicationRemove"},
     0xAB: {"object": PacketSendRsp, "name": "PacketSend"},
     0xAF: {"object": NetStateGetRsp, "name": "NetStateGet"},
+    0xB0: {"object": HBPublicationGetRsp, "name": "HBPublicationGet"},
+    0xB2: {"object": HBSubscriptionGetRsp, "name": "HBSubscriptionGet"},
     0xD4: {"object": BankInfoGetRsp, "name": "BankInfoGet"},
     0xD6: {"object": StateGetRsp, "name": "StateGet"},
     0xE1: {"object": ModelPubAddrGetRsp, "name": "ModelPubAddrGet"},
